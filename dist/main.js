(()=>{"use strict";var e={d:(t,n)=>{for(var a in n)e.o(n,a)&&!e.o(t,a)&&Object.defineProperty(t,a,{enumerable:!0,get:n[a]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t)};e.d({},{cj:()=>L});let t,n,a,o,c,s,r,d,l,i,m,p,u,y,h,f,x={x:"",y:""},g={x:"",y:""},v={x:"",y:""},w=0,V=0,H=0,b=0,C=0,j=10;const k=document.getElementById("video");k.style.transform="scale(-1, 1)",console.log("handsmodule");let E,L,O=1,B=1,F=1;L=new p5((function(e){e.setup=function(){E=e.createCanvas(1280,720),E.id("p5canvas"),console.log("canvascreate"),(()=>{const e=new Hands({locateFile:e=>`https://cdn.jsdelivr.net/npm/@mediapipe/hands/${e}`});new Camera(k,{onFrame:async()=>{await e.send({image:k})},width:1280,height:720}).start(),e.setOptions({maxNumHands:2,minDetectionConfidence:.8,minTrackingConfidence:.5,selfieMode:!0}),e.onResults((e=>(e=>{if(null==e.multiHandedness)return;if(1==e.multiHandedness.length&&"Left"==e.multiHandedness[0].label)return;f=1==e.multiHandedness.length?0:1;const k=e.multiHandLandmarks[f];x=k[0],t=k[1],n=k[4],a=k[5],o=k[8],g=k[9],c=k[10],s=k[12],r=k[17],v=L.createVector(x.x,x.y),l=L.createVector(n.x,n.y),d=L.createVector(t.x,t.y),i=L.createVector(a.x,a.y),m=L.createVector(o.x,o.y),u=L.createVector(g.x,g.y),p=L.createVector(c.x,c.y),y=L.createVector(s.x,s.y),w=L.createVector(a.x,a.y),V=L.createVector(r.x,r.y),H=L.lerp(H,L.map(l.dist(u),.005,.39,30,255),.2),b=L.lerp(b,L.map(m.dist(i),.002,.4,30,255),.2),C=L.lerp(C,L.map(y.dist(u),.006,.54,30,255),.2),j=L.lerp(j,L.map(w.dist(V),.04,.3,width/30,width),.2),h=L.map(w.dist(V),.04,.3,0,.65)})(e))),console.log("handsok")})(),(()=>{const e=document.createElement("canvas");e.id="hydracanvas",e.width=1280,e.height=720,document.body.appendChild(e),new Hydra({detectAudio:!1,canvas:e,autoLoop:!0}),k.addEventListener("playing",(function(){s0.init({src:k})}));const t=document.getElementById("p5canvas");s1.init({src:t}),fps=100,src(o0).modulate(osc(1,2,1),.003).colorama(.01).scale(1.01).blend(src(s1),.1).out(o0),src(o1).modulate(osc(1,2,1),.003).blend(src(s0).scale(1,-1),.3).modulate(src(o0),(()=>h)).out(o1),src(o1).layer(o0).out(o3),render(o3)})()},e.draw=function(){e.clear(),e.push(),e.noStroke(),e.fill(H,b,C);let t=e.map(g.x,0,1,0,width);O+=.05*(t-O);let n=e.map(g.y,0,1,0,height);B+=.05*(n-B),F+=.1*(j-F),e.ellipse(O,B,F),e.pop()}}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,