(()=>{"use strict";var e={d:(t,n)=>{for(var o in n)e.o(n,o)&&!e.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:n[o]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t)};e.d({},{cj:()=>L});let t,n,o,a,c,s,r,d,i,l,m,u,p,y,h,w,g={x:"",y:""},x={x:"",y:""},f={x:"",y:""},v=0,V=0,H=0,b=0,C=0,j=10;const k=document.getElementById("video");k.style.transform="scale(-1, 1)",console.log("handsmodule");let E,L;L=new p5((function(e){e.setup=function(){E=e.createCanvas(640,480),E.id("p5canvas"),console.log("canvascreate"),(()=>{const e=new Hands({locateFile:e=>`https://cdn.jsdelivr.net/npm/@mediapipe/hands/${e}`});new Camera(k,{onFrame:async()=>{await e.send({image:k})},width:document.windowWidth,height:document.windowHeight}).start(),e.setOptions({maxNumHands:2,minDetectionConfidence:.8,minTrackingConfidence:.5,selfieMode:!0}),e.onResults((e=>(e=>{if(null==e.multiHandedness)return;if(1==e.multiHandedness.length&&"Left"==e.multiHandedness[0].label)return;w=1==e.multiHandedness.length?0:1;const k=e.multiHandLandmarks[w];g=k[0],t=k[1],n=k[4],o=k[5],a=k[8],x=k[9],c=k[10],s=k[12],r=k[17],f=L.createVector(g.x,g.y),i=L.createVector(n.x,n.y),d=L.createVector(t.x,t.y),l=L.createVector(o.x,o.y),m=L.createVector(a.x,a.y),p=L.createVector(x.x,x.y),u=L.createVector(c.x,c.y),y=L.createVector(s.x,s.y),v=L.createVector(o.x,o.y),V=L.createVector(r.x,r.y),H=L.lerp(H,L.map(i.dist(p),.005,.39,30,255),.2),b=L.lerp(b,L.map(m.dist(l),.002,.4,30,255),.2),C=L.lerp(C,L.map(y.dist(p),.006,.54,30,255),.2),j=L.lerp(j,L.map(v.dist(V),.04,.3,width/30,width),.2),h=L.map(v.dist(V),.04,.3,0,.5)})(e))),console.log("handsok")})(),(()=>{const e=document.createElement("canvas");e.id="hydracanvas",e.width=640,e.height=480,document.body.appendChild(e),new Hydra({detectAudio:!1,canvas:e,autoLoop:!0}),k.addEventListener("playing",(function(){s0.init({src:k})}));const t=document.getElementById("p5canvas");s1.init({src:t}),src(o0).modulate(osc(1,2,1),.003).colorama(.01).scale(1.01).blend(src(s1),.1).out(o0),src(o1).modulate(osc(1,2,1),.003).blend(src(s0).scale(1,-1),.3).modulate(src(o0),(()=>h)).out(o1),src(o1).layer(o0).out(o3),render(o3)})()},e.draw=function(){e.clear(),e.push(),e.noStroke(),e.fill(H,b,C),e.ellipse(e.map(x.x,0,1,0,width),e.map(x.y,0,1,0,height),j),e.pop()}}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,